// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fsm.proto

package fsmpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MsgBeat         MessageType = 0
	MsgHeartbeat    MessageType = 1
	MsgEtcdPend     MessageType = 2
	MsgEtcdStop     MessageType = 3
	MsgEtcdReCovery MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "MsgBeat",
	1: "MsgHeartbeat",
	2: "MsgEtcdPend",
	3: "MsgEtcdStop",
	4: "MsgEtcdReCovery",
}

var MessageType_value = map[string]int32{
	"MsgBeat":         0,
	"MsgHeartbeat":    1,
	"MsgEtcdPend":     2,
	"MsgEtcdStop":     3,
	"MsgEtcdReCovery": 4,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ef5b9a5dc540ad10, []int{0}
}

type Message struct {
	Type         MessageType `protobuf:"varint,1,opt,name=type,enum=fsmpb.MessageType" json:"type"`
	To           uint64      `protobuf:"varint,2,opt,name=to" json:"to"`
	From         uint64      `protobuf:"varint,3,opt,name=from" json:"from"`
	IsEtcdStoped bool        `protobuf:"varint,4,opt,name=isEtcdStoped" json:"isEtcdStoped"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef5b9a5dc540ad10, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MsgBeat
}

func (m *Message) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Message) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Message) GetIsEtcdStoped() bool {
	if m != nil {
		return m.IsEtcdStoped
	}
	return false
}

func init() {
	proto.RegisterEnum("fsmpb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Message)(nil), "fsmpb.Message")
}

func init() { proto.RegisterFile("fsm.proto", fileDescriptor_ef5b9a5dc540ad10) }

var fileDescriptor_ef5b9a5dc540ad10 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0x31, 0x4b, 0xfc, 0x30,
	0x18, 0x06, 0xf0, 0xa4, 0x97, 0x3f, 0x77, 0xff, 0xb7, 0x87, 0x57, 0x5e, 0x6f, 0x08, 0x37, 0xd4,
	0xe2, 0x54, 0x44, 0x7a, 0xe0, 0xea, 0x56, 0x11, 0x5c, 0x0a, 0x72, 0x3a, 0xb9, 0xf5, 0xae, 0x6f,
	0x83, 0x43, 0x4d, 0x68, 0x82, 0xd0, 0x6f, 0xa1, 0xdf, 0xca, 0xf1, 0x46, 0x27, 0x41, 0xfa, 0x45,
	0xa4, 0xb1, 0x43, 0xdd, 0xc2, 0xef, 0x79, 0x9e, 0x84, 0xc0, 0xff, 0xda, 0x36, 0x99, 0x69, 0xb5,
	0xd3, 0xf8, 0xaf, 0xb6, 0x8d, 0xd9, 0x6f, 0xd6, 0x4a, 0x2b, 0xed, 0x65, 0x3b, 0x9c, 0x7e, 0xc3,
	0xf3, 0x77, 0x0e, 0xf3, 0x82, 0xac, 0x2d, 0x15, 0xe1, 0x25, 0x08, 0xd7, 0x19, 0x92, 0x3c, 0xe1,
	0xe9, 0xc9, 0x15, 0x66, 0x7e, 0x97, 0x8d, 0xe9, 0x63, 0x67, 0x28, 0x17, 0x1f, 0x5f, 0x67, 0x6c,
	0xe7, 0x5b, 0xb8, 0x86, 0xc0, 0x69, 0x19, 0x24, 0x3c, 0x15, 0xa3, 0x07, 0x4e, 0xa3, 0x04, 0x51,
	0xb7, 0xba, 0x91, 0xb3, 0x89, 0x7b, 0xc1, 0x14, 0x96, 0xcf, 0xf6, 0xd6, 0x1d, 0xaa, 0x07, 0xa7,
	0x0d, 0x55, 0x52, 0x24, 0x3c, 0x5d, 0x8c, 0x8d, 0x3f, 0xc9, 0xc5, 0x01, 0xc2, 0xc9, 0xa3, 0x18,
	0xc2, 0xbc, 0xb0, 0x2a, 0xa7, 0xd2, 0x45, 0x0c, 0x23, 0x58, 0x16, 0x56, 0xdd, 0x51, 0xd9, 0xba,
	0xfd, 0x20, 0x1c, 0x57, 0x10, 0x16, 0x56, 0x0d, 0xf3, 0x7b, 0x7a, 0xa9, 0xa2, 0x60, 0x02, 0xc3,
	0x7d, 0xd1, 0x0c, 0x4f, 0x61, 0x35, 0xc2, 0x8e, 0x6e, 0xf4, 0x2b, 0xb5, 0x5d, 0x24, 0xf2, 0xcd,
	0xf1, 0x3b, 0x66, 0x6f, 0x7d, 0xcc, 0x8e, 0x7d, 0xcc, 0x3e, 0xfb, 0x98, 0x3d, 0x2d, 0xb2, 0xed,
	0xb5, 0xff, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x61, 0x1a, 0x66, 0x3d, 0x01, 0x00,
	0x00,
}
